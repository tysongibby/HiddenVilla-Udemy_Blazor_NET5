@page "/hotel-amenities"
@using Business.Repository.IRepository
@using Microsoft.AspNetCore.Components
@using Models
@inject IHotelAmenityRepository HotelAmenityRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject HiddenVilla.Server.Services.IServices.IFileUpload FileUpload

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Amenities</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-amenity/create" class="btn btn-info form-control">Add New Amenity</NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Timing</th>
                    <th>Icon</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (HotelAmenityDtos != null && HotelAmenityDtos.Any())
                {
                    foreach (var amenity in HotelAmenityDtos)
                    {
                        <tr>
                            <td>@amenity.Name</td>
                            <td>@amenity.Timing</td>
                            <td><i class="@amenity.IconStyle"></i></td>                            
                            <td>
                                <NavLink href="@($"hotel-amenity/edit/{amenity.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(amenity.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>

<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code
{
    internal IEnumerable<HotelAmenityDto> HotelAmenityDtos { get; set; } = new List<HotelAmenityDto>();
    internal int? DeleteAmenityId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        HotelAmenityDtos = await HotelAmenityRepository.GetAllHotelAmenities();
    }

    private async Task HandleDelete(int amenityId)
    {
        DeleteAmenityId = amenityId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteAmenityId != null)
        {
            HotelAmenityDto hotelAmenityDto = await HotelAmenityRepository.GetHotelAmenity(DeleteAmenityId.Value);
            await HotelAmenityRepository.DeleteHotelAmenity(DeleteAmenityId.Value);
            await JsRuntime.ToastrSuccess("Hotel Amenity Deleted successfully");
            HotelAmenityDtos = await HotelAmenityRepository.GetAllHotelAmenities();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }

}
