@page "/hotel-room/create"
@page "/hotel-room/edit/{id:int}"
@using Models
@using Business.Repository.IRepository
@using HiddenVilla.Server.Services.IServices
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using HiddenVilla.Server.Helper
@using Microsoft.AspNetCore.Components.Forms
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelRoomImageRepository HotelRoomImageRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3">Create Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="hotelRoomDto" OnValidSubmit="HandleHotelRoomObsurd">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary/>*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="hotelRoomDto.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>hotelRoomDto.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupany</label>
                        <InputNumber @bind-Value="hotelRoomDto.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>hotelRoomDto.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="hotelRoomDto.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>hotelRoomDto.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Square feet</label>
                        <InputText @bind-Value="hotelRoomDto.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="hotelRoomDto.Details" class="form-control"></InputTextArea>
                    </div>
                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (hotelRoomDto.ImageUrls != null && hotelRoomDto.ImageUrls.Count > 0)
                            {
                                int count = 1;
                                foreach (var imageUrl in hotelRoomDto.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@imageUrl') 50% 50%;">
                                            <span class="room-image-title">@count</span>
                                        </div>
                                        <button type="button" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    count++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room </button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to List</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code
{

    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDto hotelRoomDto { get; set; } = new HotelRoomDto();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDto RoomImageDto { get; set; } = new HotelRoomImageDto();
    private bool IsImageUploadProcessStarted { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //update
            Title = "Update";
            hotelRoomDto = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if(hotelRoomDto?.HotelRoomImages.Count != null)
            {
                hotelRoomDto.ImageUrls = hotelRoomDto.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            hotelRoomDto = new HotelRoomDto();
        }
    }

    private async Task HandleHotelRoomObsurd()
    {
        var roomByName = await HotelRoomRepository.IsRoomUnique(hotelRoomDto.Name, hotelRoomDto.Id);
        if (roomByName != null)
        {
            await JsRuntime.ToastrError("Room name already exists");
            return;
        }

        try
        {
            if (hotelRoomDto.Id != 0 && Title == "Update")
            {
                //Update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(hotelRoomDto.Id, hotelRoomDto);
                await AddHotelRoomImage(updateRoomResult);
                await JsRuntime.ToastrSuccess("Hotel room updated successfully.");
            }
            else
            {
                //create
                var createdResult = await HotelRoomRepository.CreateHotelRoom(hotelRoomDto);
                await AddHotelRoomImage(createdResult);
                await JsRuntime.ToastrSuccess("Hotel room created successfully.");
            }

        }
        catch (Exception ex)
        {
            // log exceptions
        }

        NavigationManager.NavigateTo("hotel-room");


    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".jpeg" || fileInfo.Extension.ToLower() == ".png")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please upload only .jpg, .jpeg or .png files.");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (hotelRoomDto.ImageUrls != null && hotelRoomDto.ImageUrls.Any())
                    {
                        hotelRoomDto.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        hotelRoomDto.ImageUrls = new List<string>();
                        hotelRoomDto.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Image upload failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }

    private async Task AddHotelRoomImage(HotelRoomDto roomDto)
    {
        try
        {
            foreach (var imageUrl in hotelRoomDto.ImageUrls)
            {
                if (hotelRoomDto.HotelRoomImages == null || hotelRoomDto.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
                {

                    RoomImageDto = new HotelRoomImageDto()
                    {
                        RoomId = roomDto.Id,
                        RoomImageUrl = imageUrl
                    };
                    await HotelRoomImageRepository.CreateHotelRoomImage(RoomImageDto);
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

}

