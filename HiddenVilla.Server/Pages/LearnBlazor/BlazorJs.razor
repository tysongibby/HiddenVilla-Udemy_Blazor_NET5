@page "/blazorjs"
@inject IJSRuntime JSRuntime

<h3>Blazor JS</h3>

<div class="row">
    <button class="btn btn-secondary" @onclick="(()=>TestConfirmBox(ConfirmMessage))">Test Confirm Button</button>
</div>
<br />
<div class="row mt-4">
    <button class="btn btn-success" @onclick="TestSuccess">Test Toastr Success</button>
    <button class="btn btn-danger" @onclick="TestFailure">Test Toaster Failure</button>
</div>

<div class="row mt-4">
    <button class="btn btn-success" @onclick="TestSuccessSwal">Test Swal Success</button>
    <button class="btn btn-danger" @onclick="TestFailureSwal">Test Swal Failure</button>
</div>
<div class="row">
    @if (ConfirmResult)
    {
        <p>Confirmation has been made.</p>
    }
    else
    { 
        <p>Confirmation pending.</p>
    }
</div>

@code {
    private string ConfirmMessage { get; set; } = "Are you sure you want to click?";
    private bool ConfirmResult { get; set; }

    private async Task TestConfirmBox(string message)
    {
        ConfirmResult = await JSRuntime.InvokeAsync<bool>("confirm", message);
    }

    //Extending JSRuntime
    private async Task TestSuccess()
    {
        await JSRuntime.ToastrSuccess("Success Message");
    }
    private async Task TestFailure()
    {
        await JSRuntime.ToastrError("Error Message");
    }

    //not extending JSRuntime added custom JS in common.js file
    private async Task TestSuccessSwal()
    {
        await JSRuntime.InvokeVoidAsync("ShowSwal", "success", "Task completed successfully!");
    }
    private async Task TestFailureSwal()
    {
        await JSRuntime.InvokeVoidAsync("ShowSwal", "error", "Task failed");
    }


    //Extending JSRuntime
    //private async Task TestSuccessSwal()
    //{
    //    await JSRuntime.SwalSuccess("Main Success Message", "Submessage for Success");
    //}
    //private async Task TestFailureSwal()
    //{
    //    await JSRuntime.SwalError("Main Error Message", "Submessage for Error");
    //}

}
